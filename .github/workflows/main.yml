name: Build Dart SDK RPM

on:
  workflow_dispatch:
    inputs:
      dart_version:
        description: 'Dart SDK version to build'
        required: true
        default: '3.7.1'
      architecture:
        description: 'Target architecture'
        required: true
        default: 'x64'
        type: choice
        options:
          - x64
          - arm64
          - ia32

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Set up environment variables
        run: |
          echo "DART_VERSION=${{ github.event.inputs.dart_version }}" >> $GITHUB_ENV
          echo "ARCHITECTURE=${{ github.event.inputs.architecture }}" >> $GITHUB_ENV
          echo "BUILD_DIR=${{ github.workspace }}/build" >> $GITHUB_ENV
          echo "RPMBUILD_DIR=${{ github.workspace }}/rpmbuild" >> $GITHUB_ENV

      - name: Install RPM build dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y rpm build-essential ruby-dev rubygems
          sudo gem install fpm

      - name: Create build directories
        run: |
          mkdir -p ${{ env.BUILD_DIR }}
          mkdir -p ${{ env.RPMBUILD_DIR }}/{RPMS,SRPMS,BUILD,SOURCES,SPECS,tmp}

      - name: Download Dart SDK
        run: |
          DART_FILENAME="dartsdk-linux-${{ env.ARCHITECTURE }}-release.zip"
          DOWNLOAD_URL="https://storage.googleapis.com/dart-archive/channels/stable/release/${{ env.DART_VERSION }}/sdk/${DART_FILENAME}"
          
          echo "Downloading Dart SDK from ${DOWNLOAD_URL}"
          curl -L ${DOWNLOAD_URL} -o ${{ env.BUILD_DIR }}/${DART_FILENAME}
          
          # Extract the SDK
          unzip ${{ env.BUILD_DIR }}/${DART_FILENAME} -d ${{ env.BUILD_DIR }}

      - name: Create RPM spec file
        run: |
          cat > ${{ env.RPMBUILD_DIR }}/SPECS/dart-sdk.spec << 'EOF'
          Name:           dart-sdk
          Version:        %{_version}
          Release:        1%{?dist}
          Summary:        Dart SDK
          
          Group:          Development/Languages
          License:        BSD
          URL:            https://dart.dev
          BuildArch:      %{_arch}
          
          %description
          The Dart SDK, including the VM, dart2js, pub, and all command line tools.
          
          %prep
          # No prep needed as we're using pre-built binaries
          
          %build
          # No build needed
          
          %install
          mkdir -p %{buildroot}/usr/lib/dart
          cp -R %{_sourcedir}/dart-sdk/* %{buildroot}/usr/lib/dart/
          mkdir -p %{buildroot}/usr/bin
          ln -sf /usr/lib/dart/bin/dart %{buildroot}/usr/bin/dart
          ln -sf /usr/lib/dart/bin/dartaotruntime %{buildroot}/usr/bin/dartaotruntime
          ln -sf /usr/lib/dart/bin/pub %{buildroot}/usr/bin/pub
          ln -sf /usr/lib/dart/bin/dart2js %{buildroot}/usr/bin/dart2js
          ln -sf /usr/lib/dart/bin/dartanalyzer %{buildroot}/usr/bin/dartanalyzer
          ln -sf /usr/lib/dart/bin/dartdoc %{buildroot}/usr/bin/dartdoc
          ln -sf /usr/lib/dart/bin/dartfmt %{buildroot}/usr/bin/dartfmt
          
          %files
          /usr/lib/dart/
          /usr/bin/dart
          /usr/bin/dartaotruntime
          /usr/bin/pub
          /usr/bin/dart2js
          /usr/bin/dartanalyzer
          /usr/bin/dartdoc
          /usr/bin/dartfmt
          
          %changelog
          * $(date "+%a %b %d %Y") GitHub Actions <actions@github.com> - %{_version}-1
          - Automated build of Dart SDK %{_version}
          EOF

      - name: Prepare source for RPM
        run: |
          cp -R ${{ env.BUILD_DIR }}/dart-sdk ${{ env.RPMBUILD_DIR }}/SOURCES/

      - name: Build RPM using rpmbuild
        run: |
          TARGET_ARCH="${{ env.ARCHITECTURE }}"
          if [ "$TARGET_ARCH" = "x64" ]; then
            TARGET_ARCH="x86_64"
          elif [ "$TARGET_ARCH" = "ia32" ]; then
            TARGET_ARCH="i386"
          elif [ "$TARGET_ARCH" = "arm64" ]; then
            TARGET_ARCH="aarch64"
          fi
          
          rpmbuild -bb \
            --define "_version ${{ env.DART_VERSION }}" \
            --define "_arch ${TARGET_ARCH}" \
            --define "_topdir ${{ env.RPMBUILD_DIR }}" \
            ${{ env.RPMBUILD_DIR }}/SPECS/dart-sdk.spec

      # Alternative: Build RPM using fpm
      - name: Build RPM using fpm (fallback)
        if: failure()
        run: |
          TARGET_ARCH="${{ env.ARCHITECTURE }}"
          if [ "$TARGET_ARCH" = "x64" ]; then
            TARGET_ARCH="x86_64"
          elif [ "$TARGET_ARCH" = "ia32" ]; then
            TARGET_ARCH="i386"
          elif [ "$TARGET_ARCH" = "arm64" ]; then
            TARGET_ARCH="aarch64"
          fi
          
          cd ${{ env.BUILD_DIR }}
          fpm -s dir -t rpm \
            --name dart-sdk \
            --version ${{ env.DART_VERSION }} \
            --architecture ${TARGET_ARCH} \
            --description "Dart SDK including VM, dart2js, pub, and all command line tools" \
            --license "BSD" \
            --maintainer "GitHub Actions <actions@github.com>" \
            --url "https://dart.dev" \
            --vendor "Dart Team" \
            --after-install <(echo "echo 'Dart SDK has been installed to /usr/lib/dart'") \
            --directories /usr/lib/dart \
            dart-sdk=/usr/lib/dart

          # Create symbolic links
          mkdir -p ${{ env.BUILD_DIR }}/bin
          ln -sf /usr/lib/dart/bin/dart ${{ env.BUILD_DIR }}/bin/dart
          ln -sf /usr/lib/dart/bin/dartaotruntime ${{ env.BUILD_DIR }}/bin/dartaotruntime
          ln -sf /usr/lib/dart/bin/pub ${{ env.BUILD_DIR }}/bin/pub
          ln -sf /usr/lib/dart/bin/dart2js ${{ env.BUILD_DIR }}/bin/dart2js
          ln -sf /usr/lib/dart/bin/dartanalyzer ${{ env.BUILD_DIR }}/bin/dartanalyzer
          ln -sf /usr/lib/dart/bin/dartdoc ${{ env.BUILD_DIR }}/bin/dartdoc
          ln -sf /usr/lib/dart/bin/dartfmt ${{ env.BUILD_DIR }}/bin/dartfmt
          
          fpm -s dir -t rpm \
            --name dart-sdk \
            --version ${{ env.DART_VERSION }} \
            --architecture ${TARGET_ARCH} \
            --description "Dart SDK including VM, dart2js, pub, and all command line tools" \
            --license "BSD" \
            --maintainer "GitHub Actions <actions@github.com>" \
            --url "https://dart.dev" \
            --vendor "Dart Team" \
            bin/=/usr/bin/ \
            dart-sdk/=/usr/lib/dart/

      - name: Copy RPMs to artifact directory
        run: |
          mkdir -p ${{ github.workspace }}/artifacts
          find ${{ env.RPMBUILD_DIR }}/RPMS/ -name "*.rpm" -exec cp {} ${{ github.workspace }}/artifacts/ \;
          # Backup for fpm method
          find ${{ env.BUILD_DIR }} -name "*.rpm" -exec cp {} ${{ github.workspace }}/artifacts/ \;
          ls -la ${{ github.workspace }}/artifacts/

      - name: Upload RPM as artifact
        uses: actions/upload-artifact@v4
        with:
          name: dart-sdk-${{ env.DART_VERSION }}-${{ env.ARCHITECTURE }}-rpm
          path: ${{ github.workspace }}/artifacts/*.rpm
          retention-days: 7

      # Optional: Release to GitHub Releases
      - name: Create GitHub Release
        if: github.event_name == 'workflow_dispatch'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: dart-sdk-${{ env.DART_VERSION }}-${{ env.ARCHITECTURE }}
          name: Dart SDK ${{ env.DART_VERSION }} (${{ env.ARCHITECTURE }})
          draft: false
          prerelease: false
          files: ${{ github.workspace }}/artifacts/*.rpm
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
